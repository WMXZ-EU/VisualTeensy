using System;
using System.Collections.Generic;
using System.Text;

namespace vtCore
{
    static internal class Makefile_Builder
    {
        static public string generate(IProject project, LibManager libManager, SetupData setup)
        {
            var cfg = project.selectedConfiguration;
            var board = cfg.selectedBoard;
            var options = board.getAllOptions();

            StringBuilder mf = new StringBuilder();

            mf.Append("#******************************************************************************\n");
            mf.Append("# Generated by VisualTeensy (https://github.com/luni64/VisualTeensy)\n");
            mf.Append("#\n");
            mf.Append($"# {"Board",-18} {cfg.selectedBoard.name}\n");
            foreach (var o in cfg.selectedBoard.optionSets)
            {
                mf.Append($"# {o.name,-18} {o.selectedOption?.name}\n");
            }
            mf.Append("#\n");
            mf.Append($"# {DateTime.Now.ToShortDateString()} {DateTime.Now.ToShortTimeString()}\n");
            mf.Append("#******************************************************************************\n");

            mf.Append($"SHELL            := cmd.exe\nexport SHELL\n\n");

            mf.Append($"SKETCH_NAME      := {project.name?.Replace(" ", "_")}.ino\n\n");
            mf.Append(makeEntry("BOARD_ID         := ", "build.board", options) + "\n");
            mf.Append(makeEntry("MCU              := ", "build.mcu", options) + "\n\n");

            mf.Append($"BUILDER_BASE     := {setup.arduinoBase}\n");
            mf.Append($"FLAGS            := -verbose=1 -warnings=all\n");

            mf.Append($"FQBN             := {cfg.selectedBoard.fqbn}\n");
            mf.Append($"BUILD_PATH       := $(abspath .vsTeensy/build)\n");

            mf.Append($"HARDWARE         := -hardware=\"{setup.arduinoBase}/hardware\"\n");
           // mf.Append($"TOOLS            := \"{Helpers.getShortPath(setup.arduinoBase+"\\tools-builder")}\"\n\n");
            mf.Append($"TOOLS            := -tools=\"{(setup.arduinoBase + "\\tools-builder")}\"\n\n");

            mf.Append($"LIBRARIES        := -libraries=\"{Helpers.getSketchbookFolder()}/libraries\"\n");
            mf.Append($"LIBRARIES        += -libraries=\"{setup.arduinoBase}/hardware/teensy/avr/libraries\"\n");
            mf.Append($"LIBRARIES        += -libraries=\"{setup.arduinoBase}/libraries\"\n\n");

            mf.Append($"UPL_PJRC_B       := {Helpers.getShortPath(setup.arduinoTools)}\n");
            mf.Append($"UPL_TYCMD_B      := {Helpers.getShortPath(setup.uplTyBase)}\n");
            mf.Append($"UPL_CLICMD_B     := {Helpers.getShortPath(setup.uplCLIBase)}\n\n");

          
            mf.Append(setup.makefile_builder);

            return mf.ToString();
        }

        private static string makeEntry(String txt, String key, Dictionary<String, String> options)
        {
            if (options.ContainsKey(key))
            {
                return $"{txt}{options[key]}";
            }
            else
            {
                return "";
            }
        }
    }
}

